// this file is for documentation purposes only

/**
 * @file u_flag.dox
 * @ingroup lua_DOC
 * This file is for documentation purposes only, it contains additional documentation of the u_flag structure.
 */

/**
 * @brief The u_flag structure.
 * @ingroup lua_PSEUDO lua_FLAGS
 */

typedef struct U_FLAG {
  U_HEAD;
  /**
   * @details This pointer is passed to the flag constructor `u_flag_new()` and is later used by
   * `u_flag_clear_source()` (or `ulatency.clear_flag_source()` and `u_proc:clear_flag_source()`)
   *
   * If you create a flag from LUA using `ulatency.new_flag()`, the reference to **actual lua state** is used as the flag
   * source. There is one main lua state and additional lua states for every lua thread created by `ulatency.add_timeout()`
   * and `ulatency.register_filter()`.
   */
  void          *source;
//  FLAG_BEHAVIOUR age;
  char          *name;         //!< name of the flag, the convention is to use a hierarchy seperated by .
  char          *reason;       //!< why the flag was set. This makes most sense with emergency flags
  int64_t        tid;           //!< task id, if != 0 belongs to a process task
  time_t         timeout;       //!< timeout when the flag will disappear, create it with ulatency.get_time(seconds)
  int32_t        priority;      //!< custom data: priority
  int64_t        value;         //!< custom data: value
  int64_t        threshold;     //!< custom data: threshold
  uint32_t       inherit : 1;      //!< will apply to all children
  /**
   * @details (boolean) If TRUE, adding/removing the flag to/from an entity (u_proc or system flags) will
   * tag the entity as changed, i.e. u_proc.changed or system_flags_changed variable will be set.
   * Default value for new flags is 1 (TRUE).
   */
  uint32_t       urgent: 1;     //!< adding/removing the flag will tag the holder as changed
} u_flag;

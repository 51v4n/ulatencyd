-- this file is for documentation purposes only

--! @file filters.ldox
--! @ingroup lua_DOC
--! This file is for documentation purposes only, it documents filters usage.

--! @addtogroup lua_FILTERS
--! Before a process is passed to the @link lua_SCHEDULER scheduler@endlink, filters are called on that process, which
--! they can manipulate. Normally these manipulations tagging the process with a @link lua_FLAGS flag@endlink that is 
--! later used by the @link lua_SCHEDULER scheduler@endlink, but this is not the strictly rule.
--!
--! From the point of how filters manipulate the processes, they may be viewed as divided in two groups:
--! -# Filters that are tagging processes with flags that are later used by the @link lua_SCHEDULER scheduler@endlink
--!    or by other filters. See @link lua_FLAGGING_FILTERS Flagging filters@endlink.
--! -# Filters further manipulating already tagged processes. See @link lua_FLAG_FILTERS Flag filters@endlink.
--!
--! ## Fast and normal filters
--! Internally, all filters are represented by the `u_filter` structure and the core doesn't care how they manipulate the
--! processes. Instead the filter instances are internally stored in two different lists
--! (`GList *filter_list` and `GList *filter_fast_list`). This way the core distinguishes
--! between the **normal filters** and the **fast filters**. Before you continue reading, please note, that from LUA you
--! may register only the **normal filters**, though the simplerules module can create simple, i.e. tagging only, 
--! fast filters for you. Despite this, it is crucial to know, when either the type applies, because 
--! this is essential for understanding the flow of processes scheduling.
--!
--! As already stated, filters are applied whenever the process is going to be scheduled. The only exception
--! is when the filter was previously called on a process and informed the core it doesn't want to be called
--! on that process or its children anymore or for certain amount of time.
--!
--! With this exception, 
--! -# **all filters** are called on all processes by every scheduler @link ulatency.run_iteration iteration@endlink -
--!    before `Scheduler:all()` is called - and in addition to this:
--! -# **fast filters** are run:
--!    - as soon as possible on every created process (`process_new_delay()`),
--!    - if important process parameters like `UID` or `GID` change (`process_new()`).
--!
--!    If fast filters change a
--!    process it is immediately scheduled with `Scheduler:one()`. See `u_proc:clear_changed()` for descriptions
--!    what changes are considered important. For filters this mostly means adding a flag to that process.  Currently you
--!    cannot define a fast filter from LUA. Fast filters are for example created by the
--!    @link lua_MODULES simplerules module@endlink from lines tagging a process with instant=1.
--! -# **normal filters** are run whenever a process is considered to be changed:
--!    - on new processes comming from the delay stack (`run_new_pid()`),
--!    - on process if its important parameters like `UID` or `GID` change (`process_new()`),
--!    - if a single process is scheduled (`process_run_one()`), e.g. `scheduleTask` DBUS request, and
--!    - if a process is added to or removed from user active list (see `ulatency.set_active_pid()`).
--!
--!    The process will be scheduled immediately with the `Scheduler.one()` function.
--!
--! @note From LUA (e.g. rule files) you can easily create a filter by creating a LUA table (see `__FILTER`) and
--! registering it with the `ulatency.register_filter()`. This function will create internal `u_filter` instance and
--! add it to `GList *filter_list`, where normal filters are stored. Now you have registered a **normal filter**.

----------------- FILTER pseudo type ------------------

--! @class __FILTER
--! @brief This is pseudo type describing the LUA filter table you may register with the `ulatency.register_filter()`.
--! **Filter example:** @include "desktop.lua"
--! @ingroup lua_PSEUDO lua_FILTERS
__FILTER = {}

--! @brief human readable name used in reporting
--! @public @memberof __FILTER
__FILTER.name = "MyFilter"

--! @name pre filters
--! @details These are prefilters for the `__FILTER.check()` function. If any prefilter exist, they must apply to the process for
--! the check function to get called. If you can't create a regular expression to match only on the processes you
--! want, you can still do more filtering on the actual check function. These prefilters exist to reduce the calls
--! into lua, as they are compiled regular expressions that are executed very fast in the C core. If no prefilter
--! exist, the `__FILTER.check()` function is always called.
--! @warning The prefilters can't currently be changed after registering the filter.
--! @{

--! @brief perl regular expression to match against the executable basename
--! @warning Basename is limited to 15 chars.
--! @public @memberof __FILTER
__FILTER.re_basename = <PERL_REGEXP>

--! @brief perl regular expression to match against the command line used
--! @public @memberof __FILTER
__FILTER.re_cmdline = <PERL_REGEXP>

--! @brief min percent of of cpu utilization, means load/number_of_cores
--! @public @memberof __FILTER
__FILTER.min_percent = <decimal>

--! @brief Executed before any process, if exits must return true for filter to get run.
--! @public @memberof __FILTER
__FILTER.precheck = function(self)
  end
--! @} End of "pre filters"

--! @brief Check one process; this is the real heart of the filter - it gets passed an process instance which it
--! should analyse and manipulate with it's decisions.
--! All processes are checked in process tree from the top (init) descending all children.
--! @param proc A #u_proc instance.
--! @return The return value of the check filter is used to notify the core how the filter is used on future runs
--! on a per process bases. The return value informs the core about two things:
--! An timeout value of 16 bits in seconds when the filter should be run again, and flags about the transversel:
--!   - ulatency.FILTER_STOP - Stops the filter on this process, so this filter will never be run again on this process.
--!   - ulatency.FILTER_SKIP_CHILD - Skips all child process of the current process.
--!   - ulatency.FILTER_RERUN_EXEC - Rerun filter when the process calls exec() syscall,
--!     so the process changed dramatically.
--! @return **FILTER_STOP** is very important. If you mark a process with some flags that will never change, that will
--! never time out, you don't need to run the filter again, ever. The flag will stay on the process
--! for it's lifetime. If you don't return FILTER_STOP, the filter gets
--! executed every iteration causing to get more and more flags if you don't delete them first.
--!
--! The return value is calculated with: `ulatency.filter_rv(ulatency.FILTER_A [+ulatency.FILTER_B ...] , [timeout])`
--! @warning As lua does not have OR on integer values and the flags are binary flags, you have to make sure
--! not to generate invalid flags if you calculate them through addition.
--! @public @memberof __FILTER
__FILTER.check = function(self, proc)
  end

--! @brief Runs after all processes are processed.
--! You can make final manipulations to processes here.
--! @public @memberof __FILTER
__FILTER.postcheck = function(self)
  end

--! @brief Only called when the process is removed from the process list.
--! Most functions calls on the process will fail. Useful for cleanup data in filters.
--! @public @memberof __FILTER
__FILTER.exit = function(self, proc)
  end

#!/usr/bin/env python

import sys
import dbus
from optparse import OptionParser
from signal import signal, SIGINT, SIG_DFL


signal(SIGINT, SIG_DFL)


class Session:

    def __init__(self):
        self.bus = dbus.SystemBus()
        self.sets = {
            'config':self.set_config,
            'active':self.set_active,
            }
        self.gets = {
            'config':self.get_config,
            'desc':self.get_desc,
            'systemflags':self.get_systemflags,
            'activelistlength':self.get_activelistlength,
            }

    def init_system(self):
        if hasattr(self, 'system'): return
        self.system = self.bus.get_object(
            'org.quamquam.ulatencyd',
            '/org/quamquam/ulatencyd/System')

    def init_user(self):
        if hasattr(self, 'user'): return
        self.user = self.bus.get_object(
            'org.quamquam.ulatencyd',
            '/org/quamquam/ulatencyd/User')

    def config_list(self):
        self.init_system()
        system = dbus.Interface(self.system, 'org.quamquam.ulatencyd.System')
        try: return list(map(unicode, system.listSchedulerConfigs()))
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)

    def set(self, key, *value):
        if key not in self.sets:
            print("error: key '{0}' not available".format(key))
            sys.exit(1)
        return self.sets[key](*value)

    def set_config(self, config=None):
        configs = self.config_list()
        if config is None: return ",".join(configs)
        if config not in configs:
            print("error: config '{0}' not available".format(config))
            sys.exit(1)
        system = dbus.Interface(self.system, 'org.quamquam.ulatencyd.System')
        try: return system.setSchedulerConfig(config)
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)

    def set_active(self, pid=None):
        if pid is None:
            print("error: no pid given")
            sys.exit(1)
        self.init_user()
        user = dbus.Interface(self.user, 'org.quamquam.ulatencyd.User')
        try: return user.setActive(pid)
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)


    def get(self, key, *value):
        if key not in self.gets:
            print("error: key '{0}' not available".format(key))
            sys.exit(1)
        return self.gets[key](*value)

    def get_config(self):
        self.init_system()
        properties=dbus.Interface(self.system,'org.freedesktop.DBus.Properties')
        try:
            return unicode(properties.Get(
                'org.quamquam.ulatencyd.System', 'config'))
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)

    def get_desc(self, config=None):
        configs = self.config_list()
        if config is None: return ",".join(configs)
        if config not in configs:
            print("error: config '{0}' not available".format(config))
            sys.exit(1)
        system = dbus.Interface(self.system, 'org.quamquam.ulatencyd.System')
        try: return system.getSchedulerConfigDescription(config)
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)

    def get_systemflags(self):
        self.init_system()
        system = dbus.Interface(self.system, 'org.quamquam.ulatencyd.System')
        try:
            return list(map(unicode, system.listSystemFlags()))
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)

    def get_activelistlength(self):
        self.init_user()
        properties = dbus.Interface(self.user,'org.freedesktop.DBus.Properties')
        try:
            return unicode(properties.Get(
                'org.quamquam.ulatencyd.User', 'activeList'))
        except dbus.exceptions.DBusException as e:
            print(e)
            sys.exit(2)


class Gui:

    def __init__(self):
        pass

    def run(self):
        return 0


class QtGui(Gui):

    def __init__(self):
        from PyQt4.Qt import QApplication, QSystemTrayIcon,\
                             QIcon, QPixmap, QMenu
        self.app = QApplication(sys.argv)
        self.session = Session()
        icon = QIcon(QPixmap(self.get_logo()))
        self.app.trayicon = QSystemTrayIcon(icon, self.app)
        self.app.trayicon.show()

        self.cur = self.session.get_config()
        configs = self.session.config_list()

        self.app.menu = QMenu()
        menu = self.app.menu.addMenu("set config")
        self.config_action = {}
        def connect(con):
            return lambda: self.switch_config(con)
        for config in configs:
            self.config_action[config] = c = menu.addAction(config)
            c.setCheckable(True)
            c.setChecked(self.cur == config)
            c.setToolTip(unicode(self.session.get_desc(config)))
            c.triggered.connect(connect(config))
        menu = self.app.menu
        menu.addSeparator()
        quit = menu.addAction("Quit")

        self.app.trayicon.setContextMenu(menu)
        quit.triggered.connect(self.app.quit)

    def run(self):
        return self.app.exec_()

    def switch_config(self, new):
        self.config_action[self.cur].setChecked(False)
        self.config_action[new].setChecked(True)
        self.cur = new

    def get_logo(self):
        header = ["16 16 5 1"]
        chars = ["#","x","o","."]
        color = ["black",
            "gray25",
            "gray50",
            "white"]
        background = [
            "                ",
            "      xxxx      ",
            "    xx####xx    ",
            "   x##xxxx##x   ",
            "  x#xx    xx#x  ",
            "  x#x      x#x  ",
            " x#x        x#x ",
            " x#x        x#x ",
            " x#x        x#x ",
            " x#x        x#x ",
            "  x#x      x#x  ",
            "  x#xx    xx#x  ",
            "   x##xxxx##x   ",
            "    xx####xx    ",
            "      xxxx      ",
            "                "]
        foreground = [
            "      ",
            "oo  oo",
            "o.  .o",
            "o....o",
            "oooo.o",
            "   o.o",
            "   ooo"]
        color = ["  c None"] + [char+" c "+col for char,col in zip(chars,color)]
        for y, line in enumerate(foreground):
            for x, char in enumerate(line):
                if char != " ":
                    s = background[y+4]
                    background[y+4] = s[:x+5] + char + s[x+6:]
        return header + color + background



def main():
    parser = OptionParser( usage = "usage: %prog [options] [key [value]]" )
    parser.add_option("--config-list", dest="list", action="store_true",
        default=False, help="list system configs")
    parser.add_option("-s", "--set", dest="set", action="store_true",
        default=False, help="set key value pair")
    parser.add_option("-g", "--get", dest="get", action="store_true",
        default=False, help="get value by key")
    parser.add_option("--gui", dest="gui", action="store_true",
        default=False, help="enable gui")


    options, args = parser.parse_args()

    if options.gui:
        sys.exit(QtGui().run())

    if options.list:
        print("\n".join(Session().config_list()))
        sys.exit(0)

    if options.set or args[0] == 'set':
        if len(args[1:]):
            print(Session().set(*args[1:]))
            sys.exit(0)
        else: print(",".join(Session().sets.keys()))

    if options.get or args[0] == 'get':
        if len(args[1:]):
            print(Session().get(*args[1:]))
            sys.exit(0)
        else: print(",".join(Session().gets.keys()))


if __name__ == "__main__":
    main()
